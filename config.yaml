# regular expression to parse filenames
# must include Row, Column and Field as groups
img_meta: '^(?P<Row>[A-H]).*(?P<Column>[0-9]{2}).*(?P<Field>[0-9]{2}).*'
img_suffix: '.png'
in_dir_images: 'data/images'
out_dir_images: 'data/out'
# stores meta infos if meta_dir is not None
meta_dir: 'data/out'

# image information
n_rows: 2
n_cols: 2
# channels are ignored if not found in path
channels: ['TexasRed', 'DAPI', 'FITC', 'Cy5', 'Cy3']
# best channel for feature matching
feat_channel: 'TexasRed'
# looks for features or cross-correlation in whole image or if None
overlap: 0.2
# reading: 'left-to-right', 'top-to-bottom' or 'snake'
reading: 'left-to-right'
# method: 'extended-depth', 'overlay', 'average-blending', 'linear-blending'
composition: 'overlay'

# verbose True for debugging
verbose: True
# saves information about optimization in meta_dir
logging: False

# settings for stitching
# approach to find translation between two images
# can be 'feature_based', 'fourier-based' or 'feature-else-fourier'
approach: 'fourier-based'
# preprocessing
# pyramid scaling, will look at high-res inputs if low-res ones do not generate matches
scales: [0.2, 0.4, 0.6, 0.8, 1]
# feature detection, matching and transform estimation
min_inliers: 50
ransac_reproj_threshold: 5.0
lowe_ratio: 0.7
# parameters for graph based optimization
optim_n_iter: 10000
optim_lr: 0.5
optim_lr_scheduler_milestones: null
output_iter: [0, 100, 200, 300, 500, 1000, 2000, 4000, 6000, 8000, 9000, 9500, 9999]

# True if run on jupyter notebook
# Uses widget to show progress
jupyter: True